var max_wall_width = 5;
 
 var laser_length = 1;
 var laser_radius = 7/32;
 var laser_big_radius = 7/16;
 var laser_offset = 5/8;
 
 var sprayer_width = 9/16;
 var sprayer_length = 2 + 5/16;
 var sprayer_height = 1 + 5/8;
 
 var motor_radius = 15/16; motor_radius /= 2;
 var motor_length = 1 + 1/8;
 var gear_offset = 1/16;
 var gear_width = 3/16;
 var gear_radius = 1/4;
 
 var spring_delta = 1/4;
 
 var breadboard_length = 1 + 7/8 + 1/16;
 var breadboard_height = 1 + 3/8;
 var breadboard_thickness = 5/8;
 
 var bottle_height = 8.75;
 var bottle_radius = 2.75; bottle_radius /= 2;
 var bottle_neck_radius = 1 + 3/8; bottle_neck_radius /= 2;
 var bottle_neck_offset = 5/8;
 
 var thickness = 3/16;
 var clearance = 1/16;
 
 var wire_width = 3/32;
 
 var base_size = [thickness, breadboard_length + thickness*4 + laser_radius*2 + bottle_radius*2, 1 + breadboard_height + thickness*4];
 
 //stabilizer
 var stabilizer_radius = 1/4;
 var stabilizer_height = breadboard_thickness + thickness*2;
 
 //track
 var pin_width = 0.16;
 var handle_radius = 7/16;
 var full_track_length = base_size[1] - thickness*3;
 var handle_length = full_track_length/2 + thickness*2;
 var track_size  = [thickness*2 + wire_width*3, full_track_length/2 + thickness/2, thickness*2 + wire_width];
 
 //grip
 var grip_height = 1 + 1/16;
 var grip_radius = 1/8;
 var grip_size = [-(grip_radius*2 + stabilizer_height + stabilizer_radius),thickness,-grip_height];
 
 function Grip(size)
 {
     var grip = cube(size);
     
     grip = union(grip, intersection(union(cylinder({'r': 5, 'h': thickness, 'fn': 128}), torus({'ro' : 5, 'ri': thickness*0.9, 'fno': 128}).translate([0,0,thickness*0.9/2])).rotateY(90).translate([size[0],-4.5,-grip_height/2]), cube([size[0], 2, grip_size[2]]).translate([size[0]/2,0,0])));
     
     return grip;
 }
 
 function Base()
 {
     var hole = cylinder({'r': 1/16}).rotateY(90);
     var base = cube(base_size);
     
     //stabilizers
     var stabilizer = cylinder({'r' : stabilizer_radius, 'h': stabilizer_height}).rotateY(-90).translate([thickness,0,0]);
     stabilizer = union(stabilizer, sphere({'r': stabilizer_radius}).translate([-stabilizer_height + stabilizer_radius,0,0]));
     stabilizer = union(stabilizer, cube([thickness, stabilizer_radius*4,stabilizer_radius*4]).rotateX(45).translate([0,0,-stabilizer_radius]));
     
     base = union(base, stabilizer.translate([0,bottle_radius*2,-stabilizer_radius]));
     base = union(base, stabilizer.translate([0,base_size[1] - 1,-stabilizer_radius]));
     
     base = union(base, stabilizer.rotateX(180).translate([0,1,stabilizer_radius + base_size[2] + clearance]));
     base = union(base, stabilizer.rotateX(180).translate([0,base_size[1] - 1,stabilizer_radius + base_size[2] + clearance]));
     
     //grip
     base = union(base, Grip(grip_size).translate([0,-thickness,base_size[2]]));
     base = union(base, intersection(cylinder({'r': thickness, 'h': grip_size[2]}), cube([1,-1,grip_size[2]])).translate([0,0,base_size[2]]));
     
     var cube_side = 1;
     var support = intersection(cube(2), cube([cube_side, cube_side, (-grip_size[2] - wire_width*3)/2 - clearance]).translate([-cube_side/2,-cube_side/2,0]).rotateZ(45)).rotateZ(90);
     
     base = union(base, support.translate([0,0,base_size[2] + grip_size[2]]));
     base = union(base, support.mirroredZ().translate([0,0, base_size[2]]));
     
     //track and handle
     var track = cylinder({'r': handle_radius, 'h': thickness*2 + wire_width*3}).rotateY(90).translate([0,handle_radius,handle_radius/2]);
     track = difference(track, cylinder({'r': handle_radius, 'h': 1}).translate([thickness*3 + wire_width, handle_radius, -0.25]));
     track = difference(track, cube([handle_radius*2, handle_radius*2, 1]).translate([thickness*2 + wire_width*3 - handle_radius, handle_radius, -0.25]));
     track = union(track, cube(track_size));
     track = union(track, cylinder({'r': 3/16, 'h': wire_width + thickness*2}).translate([thickness*3 + wire_width + clearance, handle_radius, 0]));
     track = difference(track, cylinder({'r': pin_width*1.1/2, 'h': wire_width + thickness*2}).translate([thickness*3 + wire_width + clearance, handle_radius, 0]));
     base = union(base, track.translate([thickness, handle_length - thickness, base_size[2] - track_size[2]/2 - 0.5]));
     
     var cutout = cube([thickness*2 + wire_width*3 + clearance/2, full_track_length + clearance, wire_width + clearance]);
     base = difference(base, cutout.translate([0,thickness - clearance/2,base_size[2] - 0.5 - wire_width/2 - clearance/2]));
     base = difference(base, cutout.scale([(wire_width*3 + clearance)/(wire_width*3 + thickness*2 + clearance/2),1,1]).rotateY(90).translate([thickness*2 + wire_width - clearance/2,thickness - clearance/2, base_size[2] - 0.5 + wire_width*1.5 + clearance/2]));
     
     //breadboard
     var wire_cutout = cube([thickness,breadboard_length,wire_width*1.5]);
     
     base = difference(base, wire_cutout.translate([0,bottle_radius*2 + thickness,thickness]));
     
     base = difference(base, wire_cutout.translate([0,bottle_radius*2 + thickness, thickness + breadboard_height + wire_width*1.5]));
     
     //cut holes
     base = difference(base, hole.scale([1,1,1]).translate([0,bottle_radius*2 + thickness + breadboard_length/4, thickness + breadboard_height/2 + wire_width*1.5]));
     base = difference(base, hole.scale([1,1,1]).translate([0,bottle_radius*2 + thickness + breadboard_length*3/4, thickness + breadboard_height/2 + wire_width*1.5]));
     
     //laser and sensor
        //laser
        var laser = cube([laser_length + 1/4, laser_radius*2, laser_radius + 1/8]).translate([0,0,-1/8]);
        laser = difference(laser, cylinder({'r' : laser_radius, 'h' : laser_length}).rotateY(90).translate([0,laser_radius,laser_radius]));
        laser = difference(laser, cylinder({'r' : laser_radius*0.75, 'h' : laser_length}).rotateY(90).translate([1,laser_radius,laser_radius]));
        laser = difference(laser, cube([1/16, laser_radius*2, laser_radius*2]).translate([laser_length + 3/32,0,0]));
        laser = difference(laser, cube([laser_length, laser_radius*2, laser_radius*2]).translate([0,0,laser_radius - 3/32]));
        
        base = union(base, laser.translate([thickness,bottle_radius*2 + breadboard_length + thickness*2.5,sprayer_height/2 + laser_radius + 1/8]));
        
        //sensor - pointing down
        var sensor = cube([wire_width*2, wire_width*5, 0.5]);
        
        sensor = difference(sensor, cube([wire_width*2, wire_width, 0.5]).translate([0,wire_width*2,0]));
        sensor = difference(sensor, cube([wire_width, wire_width*3, 0.5 - wire_width]).translate([0,wire_width,0]));
        
        base = union(base, sensor.translate([thickness,bottle_radius*2 + breadboard_length + thickness*1.5 + wire_width*1.8,]));
     
     //cover snaps
     var snap = cylinder({'r': 3/16, 'h': 1/4});
     snap = union(snap, snap.translate([0,3/16,0]));
     snap = union(snap, cube([3/8,1.5/8,1/4]).translate([-3/16,0,0]));
     snap = difference(snap.rotateZ(-45), cube().rotateZ(180));
     snap = union(snap, cylinder({'r': 1/16 - clearance/4, 'h': 1/4}).translate([-1/8 - clearance/4,0,0]));
     snap = union(snap, cylinder({'r': 1/16 - clearance/4, 'h': 1/4}).translate([0,-1/8 - clearance/4,0]));
     snap = difference(snap.rotateZ(135), cylinder({'r': 1/16 + clearance/2, 'h': 1/4}));
     snap = snap.translate([thickness + 1.5/8,0,0]);
     
     base = union(base, snap.translate([0, 1/16, (base_size[2] - 1 - thickness)*3/4 - 1/8]));
     base = union(base, snap.translate([0, 1/16, (base_size[2] - 1 - thickness)/4 - 1/8]));
     
     //motor holder holes and guides
     base = difference(base, hole.translate([0,bottle_radius + gear_offset + gear_width/2 + motor_length - thickness*3/2, base_size[2] - 1 - thickness - 1/4]));
     base = union(base, cube(wire_width).translate([thickness, bottle_radius + gear_offset + gear_width/2 + motor_length - thickness*3/2 - 3/8 - clearance/2, thickness + clearance]));
     base = union(base, cube(wire_width).translate([thickness, bottle_radius + gear_offset + gear_width/2 + motor_length - thickness*3/2 + 3/8 - wire_width + clearance/2, thickness + clearance]));
     
     //bottle holder
     var holder = cylinder({'r': bottle_neck_radius + thickness, 'h': 1/8});
     holder = difference(holder, cube(bottle_neck_radius + thickness));
     holder = union(holder, cylinder({'r': thickness/2 - clearance/2, 'h': 1/8}).translate([bottle_neck_radius + thickness/2 + clearance/2,0,0]));
     holder = union(holder, cylinder({'r': thickness/2 - clearance/2, 'h': 1/8}).translate([0,bottle_neck_radius + thickness/2 + clearance/2,0]));
     holder = difference(holder, cylinder({'r': bottle_neck_radius + clearance}));
     holder = holder.rotateZ(-45).translate([thickness + sprayer_width/2,bottle_radius,-bottle_neck_offset]);
     
     holder = union(holder, cube([-1, 3/4, 1/8]).translate([-bottle_neck_radius + sprayer_width/2 + thickness - clearance, bottle_radius - 3/8, -bottle_neck_offset]));
     holder = union(holder, cube([-3/4, 3/4,-bottle_neck_offset - 1/2]).translate([-bottle_neck_radius + sprayer_width/2 + thickness - clearance - 1/4, bottle_radius - 3/8, 1/2]));
     
     holder = union(holder, support.rotateX(90).scale([1.8,-2.2857, 1.9]).translate([0, bottle_radius - 3/8, 1/4]));
     holder = union(holder, support.rotateX(90).rotateZ(180).scale([0.4,2.2857,0.5]).translate([-bottle_neck_radius + clearance, bottle_radius - 3/8, -bottle_neck_offset + 1/8]));
     
     base = union(base, holder);
     
     return base;
 }
 
 function Motor_Holder()
 {
    //motor holder
    var motor_holder = cylinder({'r': motor_radius + thickness, 'h': motor_length});
    motor_holder = intersection(motor_holder, cube([motor_length, motor_length, motor_length]));
    var motor_bezel = cylinder({'r': thickness/2, 'h': motor_length});
    motor_holder = union(motor_holder, motor_bezel.translate([0,motor_radius + thickness/2,0]));
    motor_holder = union(motor_holder, motor_bezel.translate([motor_radius + thickness/2,0,0]));
    motor_holder = motor_holder.rotateZ(135);
    motor_holder = union(motor_holder, cube([-1,0.7,motor_length - thickness*3]).translate([-0.5,-0.35,thickness*3/2]));
    motor_holder = difference(motor_holder, cylinder({'r':motor_radius, 'h': motor_length}));
    
    motor_holder = motor_holder.rotateX(-90).translate([1.5, 0, base_size[2]/2 - 0.5 - thickness]);
    
    motor_holder = union(motor_holder, cube([thickness, motor_length - thickness*3, base_size[2] - 1 - thickness*2 - clearance]).translate([0,motor_length/2 - motor_length/2 + thickness*3/2,clearance/2]));
    
    //holes
    var hole = cylinder({'r': 1/16}).rotateY(90).translate([0,motor_length/2, 0]);
    motor_holder = difference(motor_holder, hole.translate([0,0,base_size[2] - 1 - thickness*2 - 1/4]));
    
    return motor_holder.translate([thickness, bottle_radius + sprayer_width/2 + gear_offset + gear_width/2,0]);
 }
 
 function Rail_A()
 {
     var rail = cube([thickness*2 + wire_width*3 + 3/8, full_track_length/2, wire_width]);
     
     rail = union(rail.translate([-3/8,thickness, wire_width/2]), rail.scale([(wire_width*3)/(wire_width*3 + thickness*2 + 3/8),1,1]).rotateY(90).translate([thickness*2 + wire_width,thickness, wire_width*2.5]));
     
     var pin = cylinder({'r': pin_width*1.1/2});
     
     rail = difference(rail, pin.translate([-3/16,full_track_length/8 + wire_width*2,0]));
     
     rail = difference(rail, pin.translate([-3/16,full_track_length*3/8 + wire_width*2,0]));
     
     //button
     rail = union(rail, cube([wire_width*3,-wire_width,wire_width*3]).translate([wire_width*4,wire_width*2,-wire_width/2]));
     
     var button = cylinder({'r': motor_radius + thickness, 'h': wire_width*6.5});
     button = intersection(button, cube([wire_width*16, wire_width*16, wire_width*16]));
     var button_bezel = cylinder({'r': thickness/2, 'h': wire_width*6.5});
     button = union(button, button_bezel.translate([0,motor_radius + thickness/2,0]));
     button = union(button, button_bezel.translate([motor_radius + thickness/2,0,0]));
     button = difference(button, cylinder({'r': motor_radius, 'h': wire_width*6.5}));
     
     rail = union(rail, button.rotateZ(45).rotateY(90).translate([thickness + wire_width/2,-motor_radius,wire_width]));
     
     //spring cutout
     rail = difference(rail, cube([-wire_width, full_track_length/2 - wire_width*2, wire_width*3]).translate([thickness + wire_width*2, wire_width*3,0]));
     
     return rail.translate([0,0,base_size[2] - 0.5 - wire_width]);
 }
 
 function Rail_B()
 {
     var rail = cube([-stabilizer_height + thickness, full_track_length*3/4, wire_width*3]);
     
     rail = difference(rail.translate([-clearance/2,0,0]), rail.scale([1,1,1.1/3]).translate([stabilizer_height - thickness*1.5 - 3/8,0,wire_width]));
     
     var pin = cylinder({'r': pin_width*1.1/2});
     
     rail = difference(rail, pin.translate([-3/16,full_track_length/8,0]));
     rail = difference(rail, pin.translate([-3/16,full_track_length*3/8,0]));
     
     rail = union(rail, cube([-stabilizer_height + thickness, -wire_width, wire_width*3]).translate([-clearance/2,0,0]));
     rail = union(rail, cube([-stabilizer_height , -wire_width, wire_width]).translate([thickness,0,wire_width]));
     
     var size = [grip_size[0] + clearance/2, grip_size[1], grip_size[2]];
     rail = union(rail, Grip(size).mirroredY().translate([-clearance/2, full_track_length*3/4 + thickness,0.5 + wire_width*1.5]));
     
     rail = union(rail, cube([-stabilizer_height + thickness, full_track_length/4 - clearance, wire_width*1.1]).translate([-clearance/2, full_track_length/2 + clearance, wire_width]));
     
     var cube_side = 5/8;
     rail = union(rail, intersection(cube(cube_side).translate([0,-cube_side/2,-cube_side/2]).rotateX(45), cube().translate([0,-1,-0.5])).translate([-clearance/2 - stabilizer_height/2 + thickness/2 - cube_side/2, full_track_length*3/4, wire_width*1.5]))
     
     return rail.translate([0,wire_width*2,base_size[2] - 0.5 - wire_width*1.5]);
 }
 
 function Handle()
 {
     var handle = cylinder({'r': handle_radius, 'h': handle_length - handle_radius*2});
 
    handle = handle.rotateX(-90);
    
    var end = cylinder({'r': handle_radius, 'h': handle_radius*2}).translate([0,0,-handle_radius]);
    
    handle = union(handle, end);
    handle = union(handle, end.translate([0,handle_length - handle_radius*2,0]));
 
    handle = intersection(handle, handle.scale([1,3,1]).translate([0,-handle_length*0.75,0]));
 
    handle = difference(handle, cylinder({'r': pin_width*1.1/2, 'h': handle_radius*2}).translate([0, 0, -handle_radius]));
 
    handle = difference(handle, cube([track_size[0] + clearance, track_size[1], track_size[2] + clearance]).translate([-track_size[0] - clearance/2, -0.4, -track_size[2]/2 - clearance/2]));
 
    handle = difference(handle, cube([1,-1,track_size[2] + clearance]).translate([-0.5, 0,-track_size[2]/2 - clearance/2]));
    handle = difference(handle, cylinder({'r': 1/4, 'h': track_size[2] + clearance}).translate([0,0,-track_size[2]/2 - clearance/2]));
 
    handle = difference(handle, cylinder({'r': 1/8}).translate([0,0,handle_radius - 1/16]));
    handle = difference(handle, cylinder({'r': 1/8}).translate([0,0,-1 - handle_radius + 1/16]));
 
    return handle;
 }
 
 function Cover()
 {
     var cover = cube([sprayer_length - clearance, base_size[1], base_size[2] - 1 - thickness]);
     cover = difference(cover, cube([sprayer_length, thickness, thickness]));
     
     //bevel
     cover = difference(cover, cube([sprayer_length, thickness, thickness]).translate([0,0,base_size[2] - 1 - thickness*2]));
     cover = difference(cover, cube([sprayer_length, thickness, thickness]).translate([0,base_size[1] - thickness,0]));
     cover = difference(cover, cube([sprayer_length, thickness, thickness]).translate([0,base_size[1] - thickness, base_size[2] - 1 - thickness*2]));
     cover = difference(cover, cube([thickness, thickness, base_size[2]]).translate([sprayer_length - thickness,0,0]));
     cover = difference(cover, cube([thickness, thickness, base_size[2]]).translate([sprayer_length - thickness, base_size[1] - thickness,0]));
     cover = difference(cover, cube([thickness, base_size[1], thickness]).translate([sprayer_length - thickness,0,0]));
     cover = difference(cover, cube([thickness, base_size[1], thickness]).translate([sprayer_length - thickness,0,base_size[2] - 1 - thickness*2]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, thickness, thickness]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, base_size[1] - thickness, thickness]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, base_size[1] - thickness, base_size[2] - 1 - thickness*2]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, thickness, base_size[2] - 1 - thickness*2]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, thickness, thickness]));
     cover = union(cover, cylinder({'r': thickness, 'h': sprayer_length - thickness}).rotateY(90).translate([0, thickness, thickness]));
     cover = union(cover, cylinder({'r': thickness, 'h': base_size[1] - clearance - thickness*2}).rotateX(-90).translate([sprayer_length - thickness - clearance, thickness, thickness]));
     cover = union(cover, cylinder({'r': thickness, 'h': base_size[1] - clearance - thickness*2}).rotateX(-90).translate([sprayer_length - thickness - clearance, thickness, base_size[2] - 1 - thickness*2]));
     
     cover = difference(cover, cube([sprayer_length - thickness, base_size[1] - thickness*2 + clearance, base_size[2] - 1 - thickness*3 + clearance]).translate([0,thickness - clearance/2,thickness - clearance/2]));
     
     cover = difference(cover, cube([5/16, thickness, 1/4 + clearance]).translate([0,0,(base_size[2] - 1 - thickness)*3/4 - 1/8 - clearance/2]));
     cover = difference(cover, cube([5/16, thickness, 1/4 + clearance]).translate([0,0,(base_size[2] - 1 - thickness)/4 - 1/8 - clearance/2]));
     
     cover = union(cover, cylinder({'r': 1/16, 'h': base_size[2] -1 - thickness*3}).translate([1/8, 1/16,thickness]));
     
     return cover;
 }
 
 function Sprayer()
 {
     var sprayer = cube([sprayer_length,sprayer_width,sprayer_width]);
     
     sprayer = sprayer.translate([-sprayer_width/2,-sprayer_width/2,bottle_height - sprayer_width]);     

     var bottle = cylinder({'r': bottle_radius, 'h' : bottle_height - sprayer_height});
     
     return union(sprayer,bottle);
 }
 
 function Sensor_Holder()
 {
     
 }
 
 function main()
 {
     //var base = Base();
     //base = base.translate([0,0,bottle_height - sprayer_height]);
     
     var cover = Cover();
     cover = cover.translate([thickness + clearance,0,bottle_height - sprayer_height]);
     
     //var sprayer = Sprayer();
     //sprayer = sprayer.translate([sprayer_width/2 + thickness,bottle_radius,0]);
     
     //var handle = Handle();
     //handle = handle.rotateZ(-90);
     //handle = handle.translate([thickness*3 + wire_width*3 + clearance,handle_length - thickness + handle_radius,bottle_height - sprayer_height + base_size[2] - handle_radius - thickness/2 + clearance/2]);
     
     //var motor_holder = Motor_Holder();
     //motor_holder = motor_holder.translate([0,0, bottle_height - sprayer_height + thickness]);
     
     //var rail_a = Rail_A();
     //rail_a = rail_a.translate([0,wire_width, bottle_height - sprayer_height]);
     
     //var rail_b = Rail_B();
     //rail_b = rail_b.translate([0,wire_width, bottle_height - sprayer_height]);
     
     //var rail = union(rail_a, rail_b).translate([0,1,0]);
     
     return union(  cover.setColor([0.2,0.2,0.2])
                    //,base.setColor([0.2,0.2,0.2])
                    //,handle.setColor([0.2, 0.2, 0.2])
                    //,rail.setColor([0.2,0.2,0.2])
                    //,motor_holder.setColor([0.2,0.2,0.2])
                    //,sprayer.setColor([0.5,0.5,0.5])
                    );
 }
